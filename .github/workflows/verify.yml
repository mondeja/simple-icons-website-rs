name: Verify
on:
  push:
    branches:
      - master
  pull_request:

permissions:
  contents: write

jobs:
  lighthouse:
    name: Lighthouse report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            https://simpleicons.org/
            https://simpleicons.org/preview/
          uploadArtifacts: true
          temporaryPublicStorage: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get toolchain config
        id: toolchain
        uses: ./.github/actions/get-toolchain
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ steps.toolchain.outputs.channel }}
          targets: wasm32-unknown-unknown
          profile: default
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ steps.toolchain.outputs.channel }}-lint
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-v20
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install tooling dependencies
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-make,trunk,cargo-machete
      - name: Install Node.js dependencies
        run: npm ci --ignore-scripts --no-audit --no-fund
      - name: Build
        run: cargo make build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run `cargo make lint`
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 40
          max_attempts: 3
          command: cargo make lint

  end2end-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Chrome Desktop${{ github.ref == 'refs/heads/master' && ' and publish' || '' }}
            browser: chrome
            suite: desktop
            window-size: 1920x1080
            runs-on: ubuntu-24.04
          - name: Edge Desktop
            browser: edge
            suite: desktop
            window-size: 1920x1080
            runs-on: ubuntu-24.04
          - name: Firefox Desktop
            browser: firefox
            suite: desktop
            window-size: 1920x1080
            runs-on: ubuntu-24.04
          #- name: Chrome Mobile
          #  browser: chrome
          #  runs-on: ubuntu-22.04
          #  window-size: 412x915
          #- name: Chrome Mobile Landscape
          #  browser: chrome
          #  runs-on: ubuntu-22.04
          #  window-size: 915x412
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get toolchain config
        id: toolchain
        uses: ./.github/actions/get-toolchain
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ steps.toolchain.outputs.channel }}
          targets: wasm32-unknown-unknown
          profile: minimal
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ steps.toolchain.outputs.channel }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm
      - name: Install tooling dependencies
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-make,trunk
      - name: Install Node.js dependencies
        run: npm ci --ignore-scripts --no-audit --no-fund
      - name: Build
        run: cargo make build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run chromedriver
        if: matrix.browser == 'chrome'
        run: chromedriver --port=4444 &
      - name: Run geckodriver
        if: matrix.browser == 'firefox'
        run: geckodriver --port=4444 &
      - name: Run msedgedriver
        if: matrix.browser == 'edge'
        run: msedgedriver --port=4444 &
      - uses: JarvusInnovations/background-action@v1
        name: Run app server
        with:
          run: npx serve --no-clipboard -l 8080 app/dist &
          wait-on: http://127.0.0.1:8080
          wait-for: 5m
      - name: Run app tests
        run: cargo test --package simple-icons-website-end2end --test ${{ matrix.suite }} -- --fail-fast
        env:
          BROWSER: ${{ matrix.browser }}
          WINDOW_SIZE: ${{ matrix.window-size }}
      - uses: actions/create-github-app-token@v1
        if: |
          startsWith(matrix.name, 'Chrome Desktop') &&
          github.ref == 'refs/heads/master'
        id: app-token
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}
      - name: Publish website
        if: |
          matrix.browser == 'chrome' &&
          matrix.suite == 'desktop' &&
          github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          branch: gh-pages
          folder: app/dist
          single-commit: true
          clean-exclude: CNAME
          git-config-name: simple-icons[bot]
          git-config-email: simple-icons[bot]@users.noreply.github.com

  report-wasm-size:
    name: WASM size report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get toolchain config
        id: toolchain
        uses: ./.github/actions/get-toolchain
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ steps.toolchain.outputs.channel }}
          targets: wasm32-unknown-unknown
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ steps.toolchain.outputs.channel }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-v20
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install tooling dependencies
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-make,trunk,cargo-machete
      - name: Install Node.js dependencies
        run: npm ci --ignore-scripts --no-audit --no-fund
      - name: Build
        run: cargo make build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Restore WebAssembly report
        uses: actions/cache/restore@v4
        id: restore
        with:
          path: .wasm-report/size_in_bytes
          key: ${{ runner.os }}-wasm-report-01
      - name: Create WebAssembly report
        run: |
          size_in_bytes=$(wc -c < "$(find app/dist -name '*.wasm' -print)")
          size_in_kb=$(bc -l <<< "$size_in_bytes / 1024")
          size_in_kb_rounded=$(bc -l <<< "scale=6; $size_in_kb / 1")
          size_in_mb=$(bc -l <<< "$size_in_kb / 1024")
          size_in_mb_rounded=$(bc -l <<< "scale=6; $size_in_mb / 1")
          if [ ! -d .wasm-report ]; then
            mkdir .wasm-report
          fi
          if [ ! -f .wasm-report/size_in_bytes ]; then
            echo 0 > .wasm-report/size_in_bytes
          fi
          previous_size_in_bytes=$(cat .wasm-report/size_in_bytes)
          previous_size_in_kb=$(bc -l <<< "$previous_size_in_bytes / 1024")
          previous_size_in_kb_rounded=$(bc -l <<< "scale=6; $previous_size_in_kb / 1")
          previous_size_in_mb=$(bc -l <<< "$previous_size_in_kb / 1024")
          previous_size_in_mb_rounded=$(bc -l <<< "scale=6; $previous_size_in_mb / 1")
          echo "- $size_in_bytes bytes" >> $GITHUB_STEP_SUMMARY
          echo "- $size_in_kb_rounded Kb" >> $GITHUB_STEP_SUMMARY
          echo "- $size_in_mb_rounded MB" >> $GITHUB_STEP_SUMMARY
          echo -e '\n#### Comparison against master\n' >> $GITHUB_STEP_SUMMARY
          if [ "$previous_size_in_bytes" -eq 0 ]; then
            echo "No previous WASM file has been found in the cache." >> $GITHUB_STEP_SUMMARY
          else
            if [ "$size_in_bytes" -gt "$previous_size_in_bytes" ]; then
              diff_bytes=$(bc -l <<< "$size_in_bytes - $previous_size_in_bytes")
              diff_kb=$(bc -l <<< "$diff_bytes / 1024")
              diff_kb_rounded=$(bc -l <<< "scale=6; $diff_kb / 1")
              diff_mb=$(bc -l <<< "$diff_kb / 1024")
              diff_mb_rounded=$(bc -l <<< "scale=6; $diff_mb / 1")
              echo "WASM file size has increased by:"
              echo "- +$diff_bytes bytes" >> $GITHUB_STEP_SUMMARY
              echo "- +$diff_kb_rounded Kb" >> $GITHUB_STEP_SUMMARY
              echo "- +$diff_mb_rounded MB" >> $GITHUB_STEP_SUMMARY
              rel_diff=$(bc -l <<< "($size_in_bytes - $previous_size_in_bytes) / $previous_size_in_bytes * 100")
              rel_diff_rounded=$(bc -l <<< "scale=4; $rel_diff / 1")
              echo "- +$rel_diff_rounded%" >> $GITHUB_STEP_SUMMARY
            elif [ "$size_in_bytes" -lt "$previous_size_in_bytes" ]; then
              diff_bytes=$(bc -l <<< "$previous_size_in_bytes - $size_in_bytes")
              diff_kb=$(bc -l <<< "$diff_bytes / 1024")
              diff_kb_rounded=$(bc -l <<< "scale=6; $diff_kb / 1")
              diff_mb=$(bc -l <<< "$diff_kb / 1024")
              diff_mb_rounded=$(bc -l <<< "scale=6; $diff_mb / 1")
              echo "WASM file size has decreased by:"
              echo "- -$diff_bytes bytes" >> $GITHUB_STEP_SUMMARY
              echo "- -$diff_kb_rounded Kb" >> $GITHUB_STEP_SUMMARY
              echo "- -$diff_mb_rounded MB" >> $GITHUB_STEP_SUMMARY
              rel_diff=$(bc -l <<< "($previous_size_in_bytes - $size_in_bytes) / $previous_size_in_bytes * 100")
              rel_diff_rounded=$(bc -l <<< "scale=4; $rel_diff / 1")
              echo "- Difference: -$rel_diff_rounded%" >> $GITHUB_STEP_SUMMARY
            else
              echo "WASM file size has not changed." >> $GITHUB_STEP_SUMMARY
            fi
            echo -e '\n#### Previous size\n' >> $GITHUB_STEP_SUMMARY
            echo "- $previous_size_in_bytes bytes" >> $GITHUB_STEP_SUMMARY
            echo "- $previous_size_in_kb_rounded Kb" >> $GITHUB_STEP_SUMMARY
            echo "- $previous_size_in_mb_rounded MB" >> $GITHUB_STEP_SUMMARY
          fi
          echo $size_in_bytes > .wasm-report/size_in_bytes
      - name: Save WebAssembly report
        if: github.ref == 'refs/heads/master' || steps.restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: .wasm-report/size_in_bytes
          key: ${{ runner.os }}-wasm-report-01
