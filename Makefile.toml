[env]
RUSTFLAGS = "-Dwarnings"

[config]
init_task = "init"
default_to_workspace = false

[tasks.init]
description = "Initialization task run before all others"
run_task = { name = ["fnm_use", "npm_install"] }

[tasks.fnm_use]
description = "Run 'fnm use'"
condition.env_not_set = ["CI"]
install_crate = { crate_name = "fnm", binary = "fnm", test_arg = "--help" }
command = "fnm"
args = ["use", "--install-if-missing", "--silent-if-unchanged"]

[tasks.npm_install]
description = "Run 'npm install'"
condition_script = ["which npm"]
condition.files_modified = { input = [
	"./package.json",
], output = [
	"./package-lock.json",
] }
condition.env_not_set = ["CI"]
command = "npm"
args = ["install"]

[tasks.default]
alias = "dev"

[tasks.dev]
description = "Build and run the app on development"
run_task = { name = ["run-pre-build-scripts", "serve-for-dev"] }

[tasks.serve-for-dev]
description = "Serve the app on development"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = [
	"serve",
	"--watch",
	".",
	"--watch",
	"../components",
	"--watch",
	"../libs",
	"--ignore",
	"./public/assets/js",
]
cwd = "./app"

[tasks.watch-css]
description = "Build CSS with PostCSS on development"
command = "npx"
args = [
	"postcss",
	"./stylesheet.css",
	"--output",
	"./public/assets/stylesheet.css",
	"--watch",
]
cwd = "./app"

[tasks.format]
clear = true
description = "Format files"
run_task = { name = ["xo-fix", "format-rust", "prettier-write"] }

[tasks.lint]
description = "Check format of files and run linters"
run_task = { name = ["xo", "lint-rust", "lint-css", "prettier-check"] }

[tasks.build]
clear = true
description = "Build the app for production"
run_task = { name = [
	"run-pre-build-scripts",
	"build-css",
	"build-wasm",
	"minify-wasm-js-binding",
	"minify-html",
] }

[tasks.build-wasm]
description = "Build the WASM app for production"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = ["--config", "Trunk.prod.toml", "build", "--release", "--minify"]
cwd = "./app"

[tasks.minify-wasm-js-binding]
description = "Minify the WASM JS binding"
script_runner = "@duckscript"
script = '''
files = glob_array ./app/dist/*.js
for file in ${files}
    exec npx terser ${file} --compress --mangle --output ${file}
end
'''

[tasks.minify-html]
description = "Minify the HTML files"
install_crate = { crate_name = "minhtml", binary = "minhtml", test_arg = "--help" }
script_runner = "@duckscript"
script = '''
files = glob_array ./app/dist/**/*.html
for file in ${files}
	exec minhtml --minify-css --minify-js --keep-closing-tags --output ${file} ${file}
end
'''

[tasks.build-css]
description = "Build CSS with PostCSS for production"
env = { "NODE_ENV" = "production" }
command = "npx"
args = [
	"postcss",
	"./stylesheet.css",
	"--output",
	"./public/assets/stylesheet.css",
]
cwd = "./app"

[tasks.serve-for-prod]
description = "Serve the app with serve"
command = "npx"
args = ["serve", "--no-clipboard", "-l", "8000"]
cwd = "./app/dist"

[tasks.serve]
description = "Build for production and serve"
run_task = { name = ["build", "serve-for-prod"] }

[tasks.lint-rust]
description = "Lint Rust code"
run_task = { name = ["clippy", "leptosfmt-check", "cargo-machete"] }

[tasks.clippy]
description = "Run clippy"
install_crate = "clippy"
command = "cargo"
args = ["clippy", "--no-deps"]

[tasks.dylint]
description = "Run dylint"
install_crate = "cargo-dylint"
command = "cargo"
args = ["dylint", "--all"]

[tasks.leptosfmt-check]
description = "Check Leptos code format with leptosfmt"
dependencies = ["install-leptosfmt"]
command = "leptosfmt"
args = ["--check", "--quiet", "**/src/**/*.rs"]

[tasks.cargo-machete]
description = "Check for outdated dependencies"
install_crate = "cargo-machete"
command = "cargo"
args = ["machete"]

[tasks.xo]
description = "Lint JS/TS and files affected by Prettier with XO"
command = "npx"
args = ["xo"]

[tasks.lint-css]
description = "Lint CSS with stylelint"
command = "npx"
args = [
	"stylelint",
	"{components,app}/**/*.css",
	"--ignore-path",
	".prettierignore",
	"--config",
	"./.stylelintrc.json",
]

[tasks.prettier-check]
description = "Lint files in the project with Prettier"
command = "npx"
args = ["prettier", "--check", ".", "--log-level", "warn"]

[tasks.cargo-fmt]
description = "Format Rust code with cargo fmt"
install_crate = "cargo-fmt"
command = "cargo"
args = ["fmt", "--all", "--quiet"]

[tasks.leptosfmt]
description = "Format leptos view! macros"
dependencies = ["install-leptosfmt"]
command = "leptosfmt"
args = ["--quiet", "**/src/**/*.rs"]

[tasks.format-rust]
description = "Format Rust code"
run_task = { name = ["cargo-fmt", "leptosfmt"] }

[tasks.prettier-write]
description = "Format files in the project with Prettier"
command = "npx"
args = ["prettier", "--write", ".", "--log-level", "warn"]

[tasks.xo-fix]
description = "Format JS/TS and files affected by Prettier with XO"
command = "npx"
args = ["xo", "--fix"]

[tasks.build-js-libs]
description = "Build JS libraries for the web"
run_task = { name = [
	"build-with-esbuild",
	"build-pdfkit",
	"build-blob-stream",
], parallel = true }

[tasks.build-with-esbuild]
description = "Build libraries built with esbuild"
script_runner = "@duckscript"
script = '''
rm -r ./app/public/assets/js
mkdir ./app/public/assets/js
jslibs = set ./app/public/js-libs.html
writefile ${jslibs} ""

# fast-fuzzy
packagejson = readfile node_modules/fast-fuzzy/package.json
fast_fuzzy = json_parse ${packagejson}
exec npx esbuild ./libs/fast-fuzzy/src/fast-fuzzy.js --bundle --outfile=./app/public/assets/js/fast-fuzzy-${fast_fuzzy.version}.js --minify --log-level=error
appendfile ${jslibs} "<script type=\"module\" src=\"/js/fast-fuzzy-${fast_fuzzy.version}.js\" defer></script>"

# svg-path-bbox
packagejson = readfile node_modules/svg-path-bbox/package.json
svg_path_bbox = json_parse ${packagejson}
exec npx esbuild ./libs/svg-path-bbox/src/svg-path-bbox.js --bundle --outfile=./app/public/assets/js/svg-path-bbox-${svg_path_bbox.version}.js --minify --log-level=error

# badge-maker
packagejson = readfile node_modules/badge-maker/package.json
badge_maker = json_parse ${packagejson}
exec npx esbuild ./libs/badge-maker/src/bindings.js --bundle --outfile=./app/public/assets/js/badge-maker-${badge_maker.version}.js --minify --log-level=error
'''

[tasks.build-pdfkit]
description = "Build pdfkit"
script_runner = "@duckscript"
script = '''
# pdfkit
packagejson = readfile node_modules/pdfkit/package.json
pdfkit = json_parse ${packagejson}
exec npx terser --compress --mangle --output ./app/public/assets/js/pdfkit-${pdfkit.version}.js ./node_modules/pdfkit/js/pdfkit.standalone.js
'''

[tasks.build-blob-stream]
description = "Build blob-stream"
script_runner = "@duckscript"
script = '''
# blob-stream
packagejson = readfile node_modules/blob-stream/package.json
blob_stream = json_parse ${packagejson}
exec npx terser --compress --mangle --output ./app/public/assets/js/blob-stream-${blob_stream.version}.js ./node_modules/blob-stream/.js
'''

[tasks.fetch-deprecated-icons]
description = "Fetch deprecated icons from simple-icons repository"
command = "npx"
args = ["tsx", "scripts/fetch-deprecated-icons.ts"]

[tasks.create-sitemap]
description = "Create sitemap.xml asset"
command = "npx"
args = ["tsx", "scripts/create-sitemap.ts"]

[tasks.run-pre-build-scripts]
description = "Run pre-build scripts"
run_task = { name = [
	"build-js-libs",
	"fetch-deprecated-icons",
	"create-sitemap",
], parallel = true }

[tasks.install-leptosfmt]
# Using the latest version of leptosfmt from GitHub, because released versions
# don't include support for passing arguments to `rustfmt`, which is needed to
# format files with Rust features like async functions.
description = "Install leptosfmt from Git if not already installed"
script_runner = "bash"
script = '''
which leptosfmt > /dev/null || cargo install --git https://github.com/bram209/leptosfmt
'''
