[config]
init_task = "init"
default_to_workspace = false

[tasks.init]
description = "Initialization task run before all others"
run_task = { name = ["fnm_use", "npm_install"] }

[tasks.fnm_use]
description = "Run 'fnm use'"
condition.env_not_set = ["CI"]
install_crate = { crate_name = "fnm", binary = "fnm", test_arg = "--help" }
command = "fnm"
args = ["use", "--install-if-missing", "--silent-if-unchanged"]

[tasks.npm_install]
description = "Run 'npm install'"
condition_script = ["which npm"]
condition.files_modified = { input = ["./package.json"], output = [
    "./package-lock.json"
] }
condition.env_not_set = ["CI"]
command = "npm"
args = ["install"]

[tasks.default]
alias = "dev"

[tasks.dev]
description = "Build and run the app on development"
run_task = { name = ["run-pre-build-scripts", "serve-for-dev"] }

[tasks.serve-for-dev]
description = "Serve the app on development"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = [
    "serve",
    "--watch",
    ".",
    "--watch",
    "../components",
    "--watch",
    "../libs",
    "--ignore",
    "./public/assets/js",
]
cwd = "./app"

[tasks.watch-css]
description = "Build CSS with Tailwind on development"
command = "npx"
args = [
    "tailwindcss",
    "--input",
    "./stylesheet.css",
    "--output",
    "./public/assets/stylesheet.css",
    "--watch",
    "--no-minify",
]
cwd = "./app"

[tasks.format]
clear = true
description = "Format files"
run_task = { name = ["format-rust", "format-prettier"] }

[tasks.lint]
description = "Check format of files and run linters"
run_task = { name = ["lint-prettier", "lint-js", "lint-rust", "lint-css"] }

[tasks.test]
clear = true
description = "Run tests"
command = "npx"
args = ["playwright", "test", "--trace", "on", "${@}"]
cwd = "./end2end"

[tasks.build]
clear = true
description = "Build the app for production"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
run_task = { name = [
    "run-pre-build-scripts",
    "build-css",
    "minify-css",
    "build-wasm",
    "minify-wasm-js-binding",
] }

[tasks.build-wasm]
description = "Build the WASM app for production"
install_crate = { crate_name = "trunk", binary = "trunk", test_arg = "--help" }
command = "trunk"
args = ["--config", "Trunk.prod.toml", "build", "--release"]
cwd = "./app"

[tasks.minify-wasm-js-binding]
description = "Minify the WASM JS binding"
command = "npx"
args = ["tsx", "scripts/minify-wasm-js-binding.ts"]

[tasks.build-css]
description = "Build CSS with TailwindCSS for production"
command = "npx"
args = [
    "tailwindcss",
    "--input",
    "./stylesheet.css",
    "--output",
    "./public/assets/stylesheet.css",
]
cwd = "./app"

[tasks.minify-css]
description = "Minify CSS with LightningCSS"
command = "npx"
args = ["tsx", "scripts/minify-css.ts"]

[tasks.serve-for-prod]
description = "Serve the app with serve"
command = "npx"
args = ["serve", "--no-clipboard", "-l", "8000"]
cwd = "./app/dist"

[tasks.serve]
description = "Build for production and serve"
run_task = { name = ["build", "serve-for-prod"] }

[tasks.format-rust-code]
description = "Format Rust code with rustfmt"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all"]

[tasks.clippy]
description = "Run clippy"
install_crate = "clippy"
command = "cargo"
args = ["clippy", "--", "-D", "warnings", "-D", "clippy::print_stdout"]

[tasks.lint-rust]
description = "Lint Rust code"
run_task = { name = [
    "clippy",
    "rustfmt-check",
    "leptosfmt-check",
    "cargo-machete"
] }

[tasks.rustfmt-check]
description = "Format Rust code with rustfmt"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all", "--check"]

[tasks.leptosfmt-check]
description = "Check Leptos code format with leptosfmt"
install_crate = "leptosfmt"
command = "leptosfmt"
args = ["--check", "--quiet", "*/src/**/*.rs"]

[tasks.cargo-machete]
description = "Check for outdated dependencies"
install_crate = "cargo-machete"
command = "cargo"
args = ["machete"]

[tasks.format-leptos-code]
description = "Format leptos view! macros"
install_crate = "leptosfmt"
command = "leptosfmt"
args = ["--quiet", "*/src/**/*.rs"]

[tasks.format-rust]
description = "Format Rust code and leptos view! macros"
run_task = { name = ["format-rust-code", "format-leptos-code"] }

[tasks.lint-css]
description = "Lint CSS with stylelint"
command = "npx"
args = [
    "stylelint",
    "{components,app}/**/*.css",
    "--ignore-path",
    ".prettierignore",
    "--config",
    "./.stylelintrc.json"
]

[tasks.format-prettier]
description = "Format non Rust files in the project with prettier"
command = "npx"
args = ["prettier", "--write", ".", "--log-level", "warn"]

[tasks.lint-prettier]
description = "Check formatting of non Rust files in the project with prettier"
command = "npx"
args = ["prettier", "--check", "."]

[tasks.lint-js]
description = "Lint JS and TS files in the project with ESLint"
command = "npx"
args = ["eslint", ".", "--ignore-path", ".gitignore"]

[tasks.build-js-libs]
description = "Build JS libraries for the web"
run_task = { name = [
    "build-with-esbuild",
    "build-pdfkit",
    "build-blob-stream",
], parallel = true }

[tasks.build-with-esbuild]
description = "Build libraries built with esbuild"
script_runner = "@duckscript"
script = '''
rm -r ./app/public/assets/js
mkdir ./app/public/assets/js
jslibs = set ./app/public/js-libs.html
writefile ${jslibs} ""

# fast-fuzzy
packagejson = readfile node_modules/fast-fuzzy/package.json
fast_fuzzy = json_parse ${packagejson}
exec npx esbuild ./libs/fast-fuzzy/src/fast-fuzzy.js --bundle --outfile=./app/public/assets/js/fast-fuzzy-${fast_fuzzy.version}.js --minify --log-level=error
appendfile ${jslibs} "<script type=\"module\" src=\"/js/fast-fuzzy-${fast_fuzzy.version}.js\" defer></script>"

# svg-path-bbox
packagejson = readfile node_modules/svg-path-bbox/package.json
svg_path_bbox = json_parse ${packagejson}
exec npx esbuild ./libs/svg-path-bbox/src/svg-path-bbox.js --bundle --outfile=./app/public/assets/js/svg-path-bbox-${svg_path_bbox.version}.js --minify --log-level=error
appendfile ${jslibs} "<script type=\"module\" src=\"/js/svg-path-bbox-${svg_path_bbox.version}.js\" defer></script>"

# badge-maker
packagejson = readfile node_modules/badge-maker/package.json
badge_maker = json_parse ${packagejson}
#   badge-maker needs to be built with external fs and util, see https://github.com/badges/shields/issues/9728
exec npx tsx ./scripts/comment-lines.ts ./node_modules/char-width-table-consumer/src/consumer.js "const fs = require('fs')" "const { promisify } = require('util')" "const readFile = promisify(fs.readFile)"
exec npx esbuild ./libs/badge-maker/src/bindings.js --bundle --outfile=./app/public/assets/js/badge-maker-${badge_maker.version}.js --minify --log-level=error --external:fs --external:util
appendfile ${jslibs} "<script type=\"module\" src=\"/js/badge-maker-${badge_maker.version}.js\" defer></script>"
'''

[tasks.build-pdfkit]
description = "Build pdfkit"
script_runner = "@duckscript"
script = '''
# pdfkit
packagejson = readfile node_modules/pdfkit/package.json
pdfkit = json_parse ${packagejson}
exec npx terser --compress --mangle --output ./app/public/assets/js/pdfkit-${pdfkit.version}.js ./node_modules/pdfkit/js/pdfkit.standalone.js
'''

[tasks.build-blob-stream]
description = "Build blob-stream"
script_runner = "@duckscript"
script = '''
# blob-stream
packagejson = readfile node_modules/blob-stream/package.json
blob_stream = json_parse ${packagejson}
exec npx terser --compress --mangle --output ./app/public/assets/js/blob-stream-${blob_stream.version}.js ./node_modules/blob-stream/.js
'''

[tasks.copy-fonts]
description = "Copy fonts from @fontsource directory"
script_runner = "@duckscript"
script = '''
rm -r ./app/public/assets/fonts
mkdir ./app/public/assets/fonts
cp ./node_modules/@fontsource/roboto-mono/files/ ./app/public/assets/fonts
cp ./node_modules/@fontsource/open-sans/files/ ./app/public/assets/fonts
'''

[tasks.fetch-deprecated-icons]
description = "Fetch deprecated icons from simple-icons repository"
command = "npx"
args = ["tsx", "scripts/fetch-deprecated-icons.ts"]

[tasks.create-sitemap]
description = "Create sitemap.xml asset"
command = "npx"
args = ["tsx", "scripts/create-sitemap.ts"]

[tasks.run-pre-build-scripts]
description = "Run pre-build scripts"
run_task = { name = [
    "build-js-libs",
    "copy-fonts",
    "fetch-deprecated-icons",
    "create-sitemap",
], parallel = true }
